use super::instruction::{Condition, Instruction};
use super::peripheries::{Cpu, Memory, R16, R8};

pub struct Engine<const MEM: usize, const V_MEM: usize> {
    cpu: Cpu,
    mem: Memory<MEM>,
    vmem: Memory<V_MEM>,
}

impl<const MEM: usize, const V_MEM: usize> Engine<MEM, V_MEM> {
    pub fn new() -> Self {
        Self {
            cpu: Cpu::new(),
            mem: Memory::<MEM>::new(),
            vmem: Memory::<V_MEM>::new(),
        }
    }

    /// read immediate 16bit value from current position in memory while adjusting PC
    pub fn imm16(&mut self) -> u16 {
        let imm =
            (self.mem[self.cpu[R16::PC]] as u16) << 8 | self.mem[self.cpu[R16::PC] + 1] as u16;
        self.cpu[R16::PC] += 2;
        imm
    }

    /// read immediate 8bit value from current position in memory while adjusting PC
    pub fn imm_u8(&mut self) -> u8 {
        let imm = self.mem[self.cpu[R16::PC]];
        self.cpu[R16::PC] += 1;
        imm
    }

    /// read immediate 8bit value from current position in memory while adjusting PC
    pub fn imm_i8(&mut self) -> i8 {
        let imm = self.mem[self.cpu[R16::PC]];
        self.cpu[R16::PC] += 1;
        imm as i8
    }

    /// advances pc and returns the next instruction
    pub fn next_instruction(&mut self) -> Instruction {
        let opcode = self.mem[self.cpu[R16::PC]];
        self.cpu[R16::PC] += 1;
        match opcode {
            0x00 => Instruction::NOP,
            0x01 => Instruction::LD_R16_N(R16::BC, self.imm16()),
            0x02 => Instruction::LD_iR16_R(R16::BC, R8::A),
            0x03 => Instruction::INC_R16(R16::BC),
            0x04 => Instruction::INC_R(R8::B),
            0x05 => Instruction::DEC_R(R8::B),
            0x06 => Instruction::LD_R_N(R8::B, self.imm_u8()),
            0x07 => Instruction::RLCA,
            0x08 => Instruction::LD_iN_R16(self.imm16(), R16::SP),
            0x09 => Instruction::ADD_R16(R16::BC),
            0x0a => Instruction::LD_R_iR16(R8::A, R16::BC),
            0x0b => Instruction::DEC_R16(R16::BC),
            0x0c => Instruction::INC_R(R8::C),
            0x0d => Instruction::DEC_R(R8::C),
            0x0e => Instruction::LD_R_N(R8::C, self.imm_u8()),
            0x0f => Instruction::RRCA,

            0x10 => Instruction::STOP,
            0x11 => Instruction::LD_R16_N(R16::DE, self.imm16()),
            0x12 => Instruction::LD_iR16_R(R16::DE, R8::A),
            0x13 => Instruction::INC_R16(R16::DE),
            0x14 => Instruction::INC_R(R8::D),
            0x15 => Instruction::DEC_R(R8::D),
            0x16 => Instruction::LD_R_N(R8::D, self.imm_u8()),
            0x17 => Instruction::RLA,
            0x18 => Instruction::JR_D(self.imm_i8()),
            0x19 => Instruction::ADD_R16(R16::DE),
            0x1a => Instruction::LD_R_iR16(R8::A, R16::DE),
            0x1b => Instruction::DEC_R16(R16::DE),
            0x1c => Instruction::INC_R(R8::E),
            0x1d => Instruction::DEC_R(R8::E),
            0x1e => Instruction::LD_R_N(R8::E, self.imm_u8()),
            0x1f => Instruction::RRA,

            0x20 => Instruction::JR_C_D(Condition::NZ, self.imm_i8()),
            0x21 => Instruction::LD_R16_N(R16::HL, self.imm16()),
            0x22 => Instruction::LDI_iR16_R(R16::HL, R8::A),
            0x23 => Instruction::INC_R16(R16::HL),
            0x24 => Instruction::INC_R(R8::H),
            0x25 => Instruction::DEC_R(R8::H),
            0x26 => Instruction::LD_R_N(R8::H, self.imm_u8()),
            0x27 => Instruction::DAA,
            0x28 => Instruction::JR_C_D(Condition::Z, self.imm_i8()),
            0x29 => Instruction::ADD_R16(R16::HL),
            0x2a => Instruction::LDI_R_iR16(R8::A, R16::HL),
            0x2b => Instruction::DEC_R16(R16::HL),
            0x2c => Instruction::INC_R(R8::L),
            0x2d => Instruction::DEC_R(R8::L),
            0x2e => Instruction::LD_R_N(R8::L, self.imm_u8()),
            0x2f => Instruction::CPL,

            0x30 => Instruction::JR_C_D(Condition::NC, self.imm_i8()),
            0x31 => Instruction::LD_R16_N(R16::SP, self.imm16()),
            0x32 => Instruction::LDD_iR16_R(R16::HL, R8::A),
            0x33 => Instruction::INC_R16(R16::SP),
            0x34 => Instruction::INC_iR16(R16::HL),
            0x35 => Instruction::DEC_iR16(R16::HL),
            0x36 => Instruction::LD_iR16_N(R16::HL, self.imm_u8()),
            0x37 => Instruction::SCF,
            0x38 => Instruction::JR_C_D(Condition::C, self.imm_i8()),
            0x39 => Instruction::ADD_R16(R16::SP),
            0x3a => Instruction::LDD_R_iR16(R8::A, R16::HL),
            0x3b => Instruction::DEC_R16(R16::SP),
            0x3c => Instruction::INC_R(R8::A),
            0x3d => Instruction::DEC_R(R8::A),
            0x3e => Instruction::LD_R_N(R8::A, self.imm_u8()),
            0x3f => Instruction::CCF,

            0x40 => Instruction::LD_R_R(R8::B, R8::B),
            0x41 => Instruction::LD_R_R(R8::B, R8::C),
            0x42 => Instruction::LD_R_R(R8::B, R8::D),
            0x43 => Instruction::LD_R_R(R8::B, R8::E),
            0x44 => Instruction::LD_R_R(R8::B, R8::H),
            0x45 => Instruction::LD_R_R(R8::B, R8::L),
            0x46 => Instruction::LD_R_iR16(R8::B, R16::HL),
            0x47 => Instruction::LD_R_R(R8::B, R8::A),
            0x48 => Instruction::LD_R_R(R8::C, R8::B),
            0x49 => Instruction::LD_R_R(R8::C, R8::C),
            0x4a => Instruction::LD_R_R(R8::C, R8::D),
            0x4b => Instruction::LD_R_R(R8::C, R8::E),
            0x4c => Instruction::LD_R_R(R8::C, R8::H),
            0x4d => Instruction::LD_R_R(R8::C, R8::L),
            0x4e => Instruction::LD_R_iR16(R8::C, R16::HL),
            0x4f => Instruction::LD_R_R(R8::C, R8::A),

            0x50 => Instruction::LD_R_R(R8::D, R8::B),
            0x51 => Instruction::LD_R_R(R8::D, R8::C),
            0x52 => Instruction::LD_R_R(R8::D, R8::D),
            0x53 => Instruction::LD_R_R(R8::D, R8::E),
            0x54 => Instruction::LD_R_R(R8::D, R8::H),
            0x55 => Instruction::LD_R_R(R8::D, R8::L),
            0x56 => Instruction::LD_R_iR16(R8::D, R16::HL),
            0x57 => Instruction::LD_R_R(R8::D, R8::A),
            0x58 => Instruction::LD_R_R(R8::E, R8::B),
            0x59 => Instruction::LD_R_R(R8::E, R8::C),
            0x5a => Instruction::LD_R_R(R8::E, R8::D),
            0x5b => Instruction::LD_R_R(R8::E, R8::E),
            0x5c => Instruction::LD_R_R(R8::E, R8::H),
            0x5d => Instruction::LD_R_R(R8::E, R8::L),
            0x5e => Instruction::LD_R_iR16(R8::E, R16::HL),
            0x5f => Instruction::LD_R_R(R8::E, R8::A),

            0x60 => Instruction::LD_R_R(R8::H, R8::B),
            0x61 => Instruction::LD_R_R(R8::H, R8::C),
            0x62 => Instruction::LD_R_R(R8::H, R8::D),
            0x63 => Instruction::LD_R_R(R8::H, R8::E),
            0x64 => Instruction::LD_R_R(R8::H, R8::H),
            0x65 => Instruction::LD_R_R(R8::H, R8::L),
            0x66 => Instruction::LD_R_iR16(R8::H, R16::HL),
            0x67 => Instruction::LD_R_R(R8::H, R8::A),
            0x68 => Instruction::LD_R_R(R8::L, R8::B),
            0x69 => Instruction::LD_R_R(R8::L, R8::C),
            0x6a => Instruction::LD_R_R(R8::L, R8::D),
            0x6b => Instruction::LD_R_R(R8::L, R8::E),
            0x6c => Instruction::LD_R_R(R8::L, R8::H),
            0x6d => Instruction::LD_R_R(R8::L, R8::L),
            0x6e => Instruction::LD_R_iR16(R8::L, R16::HL),
            0x6f => Instruction::LD_R_R(R8::L, R8::A),

            0x70 => Instruction::LD_iR16_R(R16::HL, R8::B),
            0x71 => Instruction::LD_iR16_R(R16::HL, R8::C),
            0x72 => Instruction::LD_iR16_R(R16::HL, R8::D),
            0x73 => Instruction::LD_iR16_R(R16::HL, R8::E),
            0x74 => Instruction::LD_iR16_R(R16::HL, R8::H),
            0x75 => Instruction::LD_iR16_R(R16::HL, R8::L),
            0x76 => Instruction::HALT,
            0x77 => Instruction::LD_iR16_R(R16::HL, R8::A),
            0x78 => Instruction::LD_R_R(R8::A, R8::B),
            0x79 => Instruction::LD_R_R(R8::A, R8::C),
            0x7a => Instruction::LD_R_R(R8::A, R8::D),
            0x7b => Instruction::LD_R_R(R8::A, R8::E),
            0x7c => Instruction::LD_R_R(R8::A, R8::H),
            0x7d => Instruction::LD_R_R(R8::A, R8::L),
            0x7e => Instruction::LD_R_iR16(R8::A, R16::HL),
            0x7f => Instruction::LD_R_R(R8::A, R8::A),

            0x80 => Instruction::ADD_R(R8::B),
            0x81 => Instruction::ADD_R(R8::C),
            0x82 => Instruction::ADD_R(R8::D),
            0x83 => Instruction::ADD_R(R8::E),
            0x84 => Instruction::ADD_R(R8::H),
            0x85 => Instruction::ADD_R(R8::L),
            0x86 => Instruction::ADD_iR16(R16::HL),
            0x87 => Instruction::ADD_R(R8::A),
            0x88 => Instruction::ADC_R(R8::B),
            0x89 => Instruction::ADC_R(R8::C),
            0x8a => Instruction::ADC_R(R8::D),
            0x8b => Instruction::ADC_R(R8::E),
            0x8c => Instruction::ADC_R(R8::H),
            0x8d => Instruction::ADC_R(R8::L),
            0x8e => Instruction::ADC_iR16(R16::HL),
            0x8f => Instruction::ADC_R(R8::A),

            0x90 => Instruction::SUB_R(R8::B),
            0x91 => Instruction::SUB_R(R8::C),
            0x92 => Instruction::SUB_R(R8::D),
            0x93 => Instruction::SUB_R(R8::E),
            0x94 => Instruction::SUB_R(R8::H),
            0x95 => Instruction::SUB_R(R8::L),
            0x96 => Instruction::SUB_iR16(R16::HL),
            0x97 => Instruction::SUB_R(R8::A),
            0x98 => Instruction::SBC_R(R8::B),
            0x99 => Instruction::SBC_R(R8::C),
            0x9a => Instruction::SBC_R(R8::D),
            0x9b => Instruction::SBC_R(R8::E),
            0x9c => Instruction::SBC_R(R8::H),
            0x9d => Instruction::SBC_R(R8::L),
            0x9e => Instruction::SBC_iR16(R16::HL),
            0x9f => Instruction::SBC_R(R8::A),

            0xa0 => Instruction::AND_R(R8::B),
            0xa1 => Instruction::AND_R(R8::C),
            0xa2 => Instruction::AND_R(R8::D),
            0xa3 => Instruction::AND_R(R8::E),
            0xa4 => Instruction::AND_R(R8::H),
            0xa5 => Instruction::AND_R(R8::L),
            0xa6 => Instruction::AND_iR16(R16::HL),
            0xa7 => Instruction::AND_R(R8::A),
            0xa8 => Instruction::XOR_R(R8::B),
            0xa9 => Instruction::XOR_R(R8::C),
            0xaa => Instruction::XOR_R(R8::D),
            0xab => Instruction::XOR_R(R8::E),
            0xac => Instruction::XOR_R(R8::H),
            0xad => Instruction::XOR_R(R8::L),
            0xae => Instruction::XOR_iR16(R16::HL),
            0xaf => Instruction::XOR_R(R8::A),

            0xb0 => Instruction::OR_R(R8::B),
            0xb1 => Instruction::OR_R(R8::C),
            0xb2 => Instruction::OR_R(R8::D),
            0xb3 => Instruction::OR_R(R8::E),
            0xb4 => Instruction::OR_R(R8::H),
            0xb5 => Instruction::OR_R(R8::L),
            0xb6 => Instruction::OR_iR16(R16::HL),
            0xb7 => Instruction::OR_R(R8::A),
            0xb8 => Instruction::CMP_R(R8::B),
            0xb9 => Instruction::CMP_R(R8::C),
            0xba => Instruction::CMP_R(R8::D),
            0xbb => Instruction::CMP_R(R8::E),
            0xbc => Instruction::CMP_R(R8::H),
            0xbd => Instruction::CMP_R(R8::L),
            0xbe => Instruction::CMP_iR16(R16::HL),
            0xbf => Instruction::CMP_R(R8::A),

            0xc0 => Instruction::RET_C(Condition::NZ),
            0xc1 => Instruction::POP(R16::BC),
            0xc2 => Instruction::JP_C_N(Condition::NZ, self.imm16()),
            0xc3 => Instruction::JP_N(self.imm16()),
            0xc4 => Instruction::CALL_C_N(Condition::NZ, self.imm16()),
            0xc5 => Instruction::PUSH(R16::BC),
            0xc6 => Instruction::ADD_N(self.imm_u8()),
            0xc7 => Instruction::RST(0x00),
            0xc8 => Instruction::RET_C(Condition::Z),
            0xc9 => Instruction::RET,
            0xca => Instruction::JP_C_N(Condition::Z, self.imm16()),
            0xcb => self.cb_instruction(),
            0xcc => Instruction::CALL_C_N(Condition::Z, self.imm16()),
            0xcd => Instruction::CALL_N(self.imm16()),
            0xce => Instruction::ADC_N(self.imm_u8()),
            0xcf => Instruction::RST(0x08),

            0xd0 => Instruction::RET_C(Condition::NC),
            0xd1 => Instruction::POP(R16::DE),
            0xd2 => Instruction::JP_C_N(Condition::NC, self.imm16()),
            0xd3 => Instruction::NOP,
            0xd4 => Instruction::CALL_C_N(Condition::NC, self.imm16()),
            0xd5 => Instruction::PUSH(R16::DE),
            0xd6 => Instruction::SUB_N(self.imm_u8()),
            0xd7 => Instruction::RST(0x10),
            0xd8 => Instruction::RET_C(Condition::C),
            0xd9 => Instruction::RETI,
            0xda => Instruction::JP_C_N(Condition::C, self.imm16()),
            0xdb => Instruction::NOP,
            0xdc => Instruction::CALL_C_N(Condition::C, self.imm16()),
            0xdd => Instruction::NOP,
            0xde => Instruction::SBC_N(self.imm_u8()),
            0xdf => Instruction::RST(0x18),

            0xe0 => Instruction::LD_iN_R(0xff00 + self.imm_u8() as u16, R8::A),
            0xe1 => Instruction::POP(R16::HL),
            0xe2 => Instruction::LD_iN_R(0xff00 + self.cpu[R8::C] as u16, R8::A),
            0xe3 => Instruction::NOP,
            0xe4 => Instruction::NOP,
            0xe5 => Instruction::PUSH(R16::HL),
            0xe6 => Instruction::AND_N(self.imm_u8()),
            0xe7 => Instruction::RST(0x20),
            0xe8 => Instruction::ADD_SP_D(self.imm_i8()),
            0xe9 => Instruction::JP_HL,
            0xea => Instruction::LD_iN_R(self.imm16(), R8::A),
            0xeb => Instruction::NOP,
            0xec => Instruction::NOP,
            0xed => Instruction::NOP,
            0xee => Instruction::XOR_N(self.imm_u8()),
            0xef => Instruction::RST(0x28),

            0xf0 => Instruction::LD_R_iN(R8::A, 0xff00 + self.imm_u8() as u16),
            0xf1 => Instruction::POP(R16::AF),
            0xf2 => Instruction::LD_R_iN(R8::A, 0xff00 + self.cpu[R8::C] as u16),
            0xf3 => Instruction::DI,
            0xf4 => Instruction::NOP,
            0xf5 => Instruction::PUSH(R16::AF),
            0xf6 => Instruction::OR_N(self.imm_u8()),
            0xf7 => Instruction::RST(0x30),
            0xf8 => Instruction::LD_HL_SP_D(self.imm_i8()),
            0xf9 => Instruction::LD_R16_R16(R16::SP, R16::HL),
            0xfa => Instruction::LD_R_iN(R8::A, self.imm16()),
            0xfb => Instruction::EI,
            0xfc => Instruction::NOP,
            0xfd => Instruction::NOP,
            0xfe => Instruction::CMP_N(self.imm_u8()),
            0xff => Instruction::RST(0x38),
        }
    }
    fn cb_instruction(&self) -> Instruction {
        Instruction::NOP
    }
}
